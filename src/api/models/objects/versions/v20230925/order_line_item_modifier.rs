//! OrderLineItemModifier

use std::collections::HashMap;

use serde::{Deserialize, Serialize};

use super::money::MoneyV20230925;

/// A [CatalogModifier](https://developer.squareup.com/reference/square/objects/CatalogModifier).
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderLineItemModifierV20230925 {
    /// A unique ID that identifies the modifier only within this order.
    ///
    /// Max Length 60
    pub uid: Option<String>,
    /// The catalog object ID referencing [CatalogModifier](https://developer.squareup.com/reference/square/objects/CatalogModifier).
    ///
    /// Max Length 192
    pub catalog_object_id: Option<String>,
    /// The version of the catalog object that this modifier references.
    pub catalog_version: Option<i64>,
    /// The name of the item modifier.
    ///
    /// Max Length 255
    pub name: Option<String>,
    /// The quantity of the line item modifier. The modifier quantity can be 0 or more. For example, suppose a restaurant offers a cheeseburger on the menu. When a buyer orders this item, the restaurant records the purchase by creating an Order object with a line item for a burger. The line item includes a line item modifier: the name is cheese and the quantity is 1. The buyer has the option to order extra cheese (or no cheese). If the buyer chooses the extra cheese option, the modifier quantity increases to 2. If the buyer does not want any cheese, the modifier quantity is set to 0.
    pub quantity: Option<String>,
    /// The base price for the modifier.
    ///
    /// base_price_money is required for ad hoc modifiers. If both catalog_object_id and base_price_money are set, base_price_money will override the predefined [CatalogModifier](https://developer.squareup.com/reference/square/objects/CatalogModifier) price.
    pub base_price_money: Option<MoneyV20230925>,
    /// Read only The total price of the item modifier for its line item. This is the modifier's base_price_money multiplied by the line item's quantity.
    pub total_price_money: Option<MoneyV20230925>,
    /// Application-defined data attached to this order. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).
    ///
    /// Keys written by applications must be 60 characters or less and must be in the character set [a-zA-Z0-9_-]. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.
    ///
    /// Values have a maximum length of 255 characters.
    ///
    /// Entries written by applications are private and can only be read or modified by the same application.
    ///
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    pub metadata: Option<HashMap<String, String>>,
}
