//! OrderServiceCharge

use std::collections::HashMap;

use serde::{Deserialize, Serialize};

use super::{money::MoneyV20230925, order_line_item_applied_tax::OrderLineItemAppliedTaxV20230925};
use crate::api::models::enums::versions::v20230925::{
    order_service_charge_scope::OrderServiceChargeScopeV20230925,
    order_service_charge_treatment_type::OrderServiceChargeTreatmentTypeV20230925,
    order_service_charge_type::OrderServiceChargeTypeV20230925,
};

/// Represents a service charge applied to an order.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct OrderServiceChargeV20230925 {
    /// A unique ID that identifies the service charge only within this order.
    ///
    /// Max Length 60
    pub uid: Option<String>,
    /// The name of the service charge.
    ///
    /// Max Length 512
    pub name: Option<String>,
    /// The catalog object ID referencing the service charge [CatalogObject](https://developer.squareup.com/reference/square/objects/CatalogObject).
    ///
    /// Max Length 192
    pub catalog_object_id: Option<String>,
    /// The version of the catalog object that this service charge references.
    pub catalog_version: Option<i64>,
    /// The service charge percentage as a string representation of a decimal number. For example, "7.25" indicates a service charge of 7.25%.
    ///
    /// Exactly 1 of percentage or amount_money should be set.
    ///
    /// Max Length 10
    pub percentage: Option<String>,
    /// The amount of a non-percentage-based service charge.
    ///
    /// Exactly one of percentage or amount_money should be set.
    pub amount_money: Option<MoneyV20230925>,
    /// Read only The amount of money applied to the order by the service charge, including any inclusive tax amounts, as calculated by Square.
    ///
    /// For fixed-amount service charges, applied_money is equal to amount_money.
    /// For percentage-based service charges, applied_money is the money calculated using the percentage.
    pub applied_money: Option<MoneyV20230925>,
    /// Read only The total amount of money to collect for the service charge.
    ///
    /// Note: If an inclusive tax is applied to the service charge, total_money does not equal applied_money plus total_tax_money because the inclusive tax amount is already included in both applied_money and total_tax_money.
    pub total_money: Option<MoneyV20230925>,
    /// Read only The total amount of tax money to collect for the service charge.
    pub total_tax_money: Option<MoneyV20230925>,
    /// The calculation phase at which to apply the service charge.
    pub calculation_phase: Option<String>,
    /// Indicates whether the service charge can be taxed. If set to true, order-level taxes automatically apply to the service charge. Note that service charges calculated in the TOTAL_PHASE cannot be marked as taxable.
    pub taxable: Option<bool>,
    /// The list of references to the taxes applied to this service charge. Each OrderLineItemAppliedTax has a tax_uid that references the uid of a top-level OrderLineItemTax that is being applied to this service charge. On reads, the amount applied is populated.
    ///
    /// An OrderLineItemAppliedTax is automatically created on every taxable service charge for all ORDER scoped taxes that are added to the order. OrderLineItemAppliedTax records for LINE_ITEM scoped taxes must be added in requests for the tax to apply to any taxable service charge. Taxable service charges have the taxable field set to true and calculated in the SUBTOTAL_PHASE.
    ///
    /// To change the amount of a tax, modify the referenced top-level tax.
    pub applied_taxes: Option<Vec<OrderLineItemAppliedTaxV20230925>>,
    /// Application-defined data attached to this service charge. Metadata fields are intended to store descriptive references or associations with an entity in another system or store brief information about the object. Square does not process this field; it only stores and returns it in relevant API calls. Do not use metadata to store any sensitive information (such as personally identifiable information or card details).
    ///
    /// Keys written by applications must be 60 characters or less and must be in the character set [a-zA-Z0-9_-]. Entries can also include metadata generated by Square. These keys are prefixed with a namespace, separated from the key with a ':' character.
    ///
    /// Value have a maximum length of 255 characters.
    ///
    /// An application can have up to 10 entries per metadata field.
    ///
    /// Entries written by applications are private and can only be read or modified by the same application.
    ///
    /// For more information, see [Metadata](https://developer.squareup.com/docs/build-basics/metadata).
    pub metadata: Option<HashMap<String, String>>,
    /// Read only The type of the service charge.
    pub r#type: Option<OrderServiceChargeTypeV20230925>,
    /// Read only The treatment type of the service charge.
    pub treatment_type: Option<OrderServiceChargeTreatmentTypeV20230925>,
    /// Indicates the level at which the apportioned service charge applies. For ORDER scoped service charges, Square generates references in `applied_service_charges` on all order line items that do not have them. For LINE_ITEM scoped service charges, the service charge only applies to line items with a service charge reference in their `applied_service_charges` field.
    ///
    /// This field is immutable. To change the scope of an apportioned service charge, you must delete the apportioned service charge and re-add it as a new apportioned service charge.
    pub scope: Option<OrderServiceChargeScopeV20230925>,
}
